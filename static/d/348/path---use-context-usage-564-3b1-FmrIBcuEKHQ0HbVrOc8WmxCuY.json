{"data":{"site":{"siteMetadata":{"title":"Blog of Yadullah Duman","author":"Yadullah Duman"}},"markdownRemark":{"id":"eb39a3e6-deb0-53a9-9a47-65e7a48c9e04","excerpt":"In one of my last posts, I shared the announcement of Hooks by the React team with you. About two weeks ago, the React team finally released…","html":"<p>In one of my last posts, I shared the announcement of Hooks by the React team with you. About two weeks ago, the React team finally released the Hooks API with version 16.8. In this blogpost I want to share one approach of how to use the <code class=\"language-text\">useContext</code> Hook along with <code class=\"language-text\">useReducer</code> to create and update context. I will not explain how the Context or Hooks API work. If you are not familiar with them, then please read the <a href=\"https://reactjs.org/docs/getting-started.html\">documentation</a>.</p>\n<h2>Creating Context</h2>\n<p>Context is a great way to provide “global” data accross your application. It is also a great method to eliminate for example deep Prop-Drilling.</p>\n<p>First we have to create a context. We will create the file <code class=\"language-text\">AppContext.js</code> in order </p>","timeToRead":1,"frontmatter":{"title":"How to use Context in React with Hooks","date":"February 15, 2019","spoiler":"One approach of using useContext together with useReducer"},"fields":{"slug":"/useContext-usage/"}}},"pageContext":{"slug":"/useContext-usage/","previous":{"fields":{"slug":"/recap-2018/"},"frontmatter":{"title":"My Recap of 2018"}},"next":null}}